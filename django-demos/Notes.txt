<<Beginning Django.pdf>>

允许的主机，是本机地址,或是*号允许所有:
ALLOWED_HOSTS = ['192.168.1.80']
ALLOWED_HOSTS = ['*']

启动命令:
./manage.py runserver 192.168.1.80:8000

BASE_DIR: django-admin startproject coffeehouse
PROJECT_DIR: django-admin startapp about

psycopg2 is also available on PyPI in the form of wheel packages for the most common platform (Linux, OSX, Windows): this should make you able to install a binary version of the module, not requiring the above build or runtime prerequisites, simply using:
$ pip install psycopg2-binary

stgreSQL psycopg2     pip install psycopg2
pip install Jinja2
pip install django-debug-toolbar

# ./manage.py migrate

--- 建立数据库模型迁移
# ./manage.py makemigrations jj2app

预览变化:
# ./manage.py sqlmigrate jj2app 0001

保存到数据库:
# ./manage.py migrate jj2app

显示迁移:
# ./manage.py showmigrations

Django Models Outside of models.py
The first technique to store Django models outside of models.py files is to create a folder named 'models' –
inside the same app – declare class models in stand-alone files in this folder and import the classes through
this new folder’s __init__ file.
if the menus.py file contains the Breakfast model class, the __init__ file must declare the line:
from .menus import Breakfast

# Import Django model class
from coffeehouse.stores.models import Store
# Get the store with the name "Downtown" or equivalent SQL: 'SELECT....WHERE
name = "Downtown"
downtown_store = Store.objects.get(name="Downtown")
# Define uptown_email for the query
uptown_email = "uptown@coffeehouse.com"
# Get the store with the email value uptown_email or equivalent SQL: 'SELECT....WHERE
email = "uptown@coffeehouse.com"'
uptown_email_store = Store.objects.get(email=uptown_email)



